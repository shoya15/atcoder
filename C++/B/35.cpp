/*
無限に広い二次元グリッドの原点 (0,0) に高橋君と 1 台のドローンがいます。このドローンは文字列が与えられた時、文字列の先頭から末尾までのそれぞれの文字を 1 つの命令と解釈して順に実行します。命令は以下の 4 種類です。
L 現在のドローンの位置を (x,y) として (x−1,y) に移動する
R 現在のドローンの位置を (x,y) として (x+1,y) に移動する
U 現在のドローンの位置を (x,y) として (x,y+1) に移動する
D 現在のドローンの位置を (x,y) として (x,y−1) に移動する
今、ドローンに何らかの命令が与えられ、どこかへと移動しました。高橋君はドローンに送られた命令を表す文字列である S を手に入れたものの、いくつかの箇所は破損し?になり分からなくなってしまいました。ただし、?が元々はL、R、U、Dのいずれかの文字だったことが分かっています。
ドローンと高橋君の距離はドローンの位置を (x,y) としてマンハッタン距離 ∣x∣+∣y∣ で表されます。求める値の種類を表す整数 T が与えられるので、移動を終えたあとのドローンと高橋君の距離としてありうる値のうち、 T=1 ならば最大値を、 T=2 ならば最小値を求めてください。
*/
#include <bits/stdc++.h>
using namespace std;
int main()
{
    string s;
    int t, x = 0, y = 0, sum = 0, ans0;
    cin >> s >> t;
    for (int i = 0; i < s.size(); i++)
    {
        if (s[i] == 'L')
            x--;
        else if (s[i] == 'R')
            x++;
        else if (s[i] == 'U')
            y++;
        else if (s[i] == 'D')
            y--;
        else
            sum++;
    }
    ans0 = abs(x) + abs(y);
    if (t == 1)
        cout << ans0 + sum << endl;
    else
    {
        if (sum <= ans0)
            cout << ans0 - sum << endl;
        else
            cout << (sum - ans0) % 2 << endl; // sum > ans0の場合、(sum-ans0)２回分で打ち消すことができる -> 結果として、答えは(sum-ams0)%2となる
    }
}